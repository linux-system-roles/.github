- name: Manage files in system roles repos
  # NOTE: include_roles currently only works with 1 role - need to figure out
  # how to pass in a list of include roles
  hosts: active_roles{{
    include_roles | split(",") | map("regex_replace", "^", ":&") | join("")
    if include_roles | d(false) else "" }}{{
    exclude_roles | split(",") | map("regex_replace", "^", ":!") | join("")
    if exclude_roles | d(false) else "" }}
  connection: local
  gather_facts: false
  vars:
    update_files_branch: update_role_files
  tasks:
    - name: Ensure gh files are present
      stat:
        name: "{{ item }}"
      register: stat
      failed_when: not stat.stat.exists
      run_once: true
      loop:
        - /usr/bin/gh
        - "{{ lookup('env', 'HOME') ~ '/.config/gh/hosts.yml' }}"

    - name: Ensure git commit file is present
      assert:
        msg: >-
          You must provide the variable update_files_commit_file which contains
          the path and filename of the file containing the contents of the git
          commit message (and will also be used for the PR title and body)
        that:
          - update_files_commit_file is defined
          - update_files_commit_file is exists
      run_once: true

    - name: Update files and create a PR
      block:
        - name: Create temp working dir
          tempfile:
            state: directory
            prefix: lsr_{{ inventory_hostname }}_
            suffix: _pr
          register: __working_dir
          when: test_dir is not defined

        - name: Set some vars
          set_fact:
            git_dir: "{{ (test_dir | d(__working_dir.path)) ~ '/' ~ inventory_hostname }}"

        - name: Clone repo
          git:
            # noqa latest
            repo: "{{ github_url_prefix ~ github_org ~ '/' ~ inventory_hostname }}"
            dest: "{{ git_dir }}"
          when: git_dir is not exists
          changed_when: false

        - name: Get number of test playbooks
          shell: ls {{ git_dir }}/tests/tests_*.yml | wc -l
          register: test_playbooks_count

        - name: Set managed_nodes_count
          set_fact:
            # The formula to calculate the number of required nodes to run x number of test playbooks:
            # x / 10 + 1
            # And +0.5 to round the result
            managed_nodes_count: "{{ ((test_playbooks_count.stdout | int) / 10 + 1 + 0.5) | int }}"

        - name: Set main branch var
          set_fact:
            __main_br: main

        - name: Checkout working branch, rebase on top of latest, see if new or not
          changed_when: false
          shell:
            chdir: "{{ git_dir }}"
            cmd: |
              set -euxo pipefail
              exec 1>&2
              cur_br=$(git branch --show-current)
              if [ "$cur_br" = "{{ __main_br }}" ]; then
                git pull
              fi
              if [ "$cur_br" = {{ update_files_branch | quote }} ]; then
                # assume this is in active development
                exit 10
              elif git checkout {{ update_files_branch | quote }} > /dev/null 2>&1; then
                git rebase "{{ __main_br }}"
                git reset --soft "{{ __main_br }}"
                exit 10
              else
                git checkout -b {{ update_files_branch | quote }}
                exit 20
              fi
          register: __checkout
          failed_when: __checkout.rc not in [10, 20]

        - name: Set vars for next steps
          set_fact:
            __is_new: "{{ __checkout.rc == 20 }}"
            __present_python_files: "{{ present_python_files
              if 'python_roles' in group_names
              else [] }}"
            __present_python_templates: "{{ present_python_templates
              if 'python_roles' in group_names
              else [] }}"
            __absent_python_files: "{{ absent_python_files
              if 'python_roles' in group_names
              else [] }}"
            __present_shellcheck_files: "{{ present_shellcheck_files
              if 'shellcheck_roles' in group_names
              else [] }}"
            __present_shellcheck_templates: "{{ present_shellcheck_templates
              if 'shellcheck_roles' in group_names
              else [] }}"
            __absent_shellcheck_files: "{{ absent_shellcheck_files
              if 'shellcheck_roles' in group_names
              else [] }}"
            __role_present_templates: "{{ role_present_templates | d([]) }}"
            __role_template_dir: role_templates/{{ inventory_hostname }}/

        - name: Set more vars
          set_fact:
            __all_present: "{{ present_files + __present_python_files +
              __present_shellcheck_files +
              present_templates + __present_python_templates +
              __present_shellcheck_templates +
              __role_present_templates }}"
            __all_absent: "{{ absent_files + __absent_python_files +
              __absent_shellcheck_files }}"

        # NOTE: If we add support for per-role or per-group overrides:
        #  if the role/group does not want to install a file that is
        #  otherwise in present_xxx, we'll have to figure out how
        #  to remove that item from __all_present - for now, the items
        #  role_present_templates and role_present_files can only add
        #  new files, or overwrite files in present_xxx
        - name: Ensure directories exist for added files
          file:
            path: "{{ git_dir }}/{{ item }}"
            state: directory
            mode: "0755"
          loop: "{{ __all_present | map('dirname') | unique }}"
          when: item | length > 0

        - name: Process files to be added or updated
          copy:
            src: "{{ item }}"
            dest: "{{ git_dir }}/{{ item }}"
            mode: preserve
          loop: "{{ present_files + __present_python_files +
            __present_shellcheck_files }}"

        - name: Process files to be removed
          shell:
            chdir: "{{ git_dir }}"
            cmd: |
              set -euo pipefail
              if [ ! -f {{ item }} ]; then
                echo WARNING: file to be deleted was not found: {{ item }}
              else
                git rm -f {{ item }}
              fi
          register: git_rm
          changed_when: "'rm ' in git_rm.stdout"
          loop: "{{ __all_absent }}"

        # NOTE: Some of the templates are github action definitions
        # which use ${{ var }} - you may have to put {%- raw %}
        # {%- endraw +%} blocks around them.
        # item.0 is the directory prefix where to find the src
        # for role specific files, it will be role_templates/$role_name/
        # otherwise it is '' (empty, no prefix)
        # role specific files are processed last so they can overwrite
        # existing files
        - name: Process templates to be added or updated
          template:
            src: "{{ item.0 ~ item.1 }}"
            dest: "{{ git_dir }}/{{ item.1 }}"
            mode: "0644"
          loop: "{{ ([''] | product(present_templates +
            __present_python_templates + __present_shellcheck_templates)) +
            ([__role_template_dir] | product(__role_present_templates)) }}"

        - name: Find workflows to create badges for
          find:
            paths: "{{ git_dir }}/.github/workflows"
            file_type: file
            excludes:
              - ansible-managed-var-comment.yml
              - ansible-plugin-scan.yml
              - build_docs.yml
              - changelog_to_tag.yml
              - pr-title-lint.yml
              - test_converting_readme.yml
              - weekly_ci.yml
          register: find

        - name: Ensure badges in README.md
          lineinfile:
            path: "{{ git_dir }}/README.md"
            regex: \[\!.*
            firstmatch: true
            line: "{%- for file in basenames -%}\
              [![{{ file }}]\
              (https://github.com/linux-system-roles/{{ inventory_hostname }}/actions/workflows/{{ file }}/badge.svg)]\
              (https://github.com/linux-system-roles/{{ inventory_hostname }}/actions/workflows/{{ file }})\
              {{- ' ' if not loop.last else '' -}}\
              {% endfor %}
              {{- ' ' if present_badges | d([]) | length > 0 else '' -}}\
              {%- for badge in present_badges | d([]) -%}
              {{ badge }}\
              {{ ' ' if not loop.last else '' }}\
              {% endfor %}"
          vars:
            basenames: "{{ find.files | map(attribute='path') | map('basename') | sort | list }}"

        # uncomment and change to 2.18 when 2.18 is released
        # - name: Create ignore file for ansible-test 2.17
        #   shell:
        #     chdir: "{{ git_dir }}"
        #     cmd: |
        #       set -euxo pipefail
        #       if [ ! -f .sanity-ansible-ignore-2.17.txt ] && [ -f .sanity-ansible-ignore-2.16.txt ]; then
        #         cp .sanity-ansible-ignore-2.16.txt .sanity-ansible-ignore-2.17.txt
        #         # 2.17 does not support py27 or py36
        #         sed -e '/compile-2.7/d' -e '/compile-3.6/d' -e '/import-2.7/d' -e '/import-3.6/d' -i .sanity-ansible-ignore-2.17.txt
        #         # https://docs.ansible.com/ansible-core/2.17/dev_guide/testing/sanity/no-unicode-literals.html
        #         sed -e '/no-unicode-literals/d' -i .sanity-ansible-ignore-2.17.txt
        #         if [ -s .sanity-ansible-ignore-2.17.txt ]; then
        #           git add .sanity-ansible-ignore-2.17.txt
        #         else
        #           rm .sanity-ansible-ignore-2.17.txt
        #         fi
        #       fi
        #   changed_when: true

        # NOTE: Due to https://github.com/linux-system-roles/cockpit/issues/130
        # we cannot automatically create symlinks for OracleLinux
        - name: Create vars symlinks for CentOS, Rocky, Alma
          shell:
            chdir: "{{ git_dir }}"
            cmd: |
              set -euxo pipefail
              same_vars_files() {
                python -c 'import sys; import yaml
              a = yaml.safe_load(open(sys.argv[1]))
              b = yaml.safe_load(open(sys.argv[2]))
              rv = 0 if a == b else 1
              sys.exit(rv)' "$1" "$2"
              }
              for dir in vars roles/rsyslog/vars tests/vars; do
                if [ ! -d "$dir" ]; then continue; fi
                pushd "$dir"
                for file in RedHat_*.yml RedHat-*.yml; do
                  if [[ "$file" =~ ^RedHat([_-])([0-9]+).yml$ ]]; then
                    sep="${BASH_REMATCH[1]}"
                    ver="${BASH_REMATCH[2]}"
                    for clone in CentOS Rocky AlmaLinux; do
                      clone_file="${clone}${sep}$ver.yml"
                      if [ "$clone" = Rocky ] || [ "$clone" = AlmaLinux ]; then
                        if [ "$ver" = 6 ] || [ "$ver" = 7 ]; then
                          if [ -e "$clone_file" ]; then
                            git rm -f "$clone_file"  # if there is already a file or link, remove it
                          fi
                          continue  # no 6 or 7 for Alma or Rocky
                        fi
                      fi
                      if [ ! -e "$clone_file" ]; then
                        ln -s "$file" "$clone_file"
                        git add "$clone_file"
                      elif [ -f "$clone_file" ] && same_vars_files "$file" "$clone_file"; then
                        git rm -f "$clone_file"
                        ln -s "$file" "$clone_file"
                        git add "$clone_file"
                      else
                        echo {{ inventory_hostname }} "$clone_file" exists and is different than "$file"
                      fi
                    done
                  fi
                done
                popd
              done
          changed_when: true

        - name: See if vars main exists
          stat:
            path: "{{ git_dir }}/vars/main.yml"
          register: __vars_main

        # some roles have no vars/ and use defaults/main.yml instead
        - name: Add vars block to main
          ansible.builtin.blockinfile:
            path: "{{ git_dir ~ '/vars/main.yml' if __vars_main.stat.exists
              else git_dir ~ '/defaults/main.yml' }}"
            insertafter: EOF
            marker: "# {mark} - DO NOT EDIT THIS BLOCK - rh distros variables"
            prepend_newline: true
            block: |
              # Ansible distribution identifiers that the role treats like RHEL
              __{{ inventory_hostname }}_rh_distros:
              {{ lsr_rh_distros | sort | to_nice_yaml(indent=2) | indent(width=2, first=true) }}
              # Same as above but includes Fedora
              __{{ inventory_hostname }}_rh_distros_fedora: "{{ '{{' }} __{{ inventory_hostname }}_rh_distros + ['Fedora'] {{ '}}' }}"

              # Use this in conditionals to check if distro is Red Hat or clone
              __{{ inventory_hostname }}_is_rh_distro: "{{ '{{' }} ansible_distribution in __{{ inventory_hostname }}_rh_distros {{ '}}' }}"

              # Use this in conditionals to check if distro is Red Hat or clone, or Fedora
              __{{ inventory_hostname }}_is_rh_distro_fedora: "{{ '{{' }} ansible_distribution in __{{ inventory_hostname }}_rh_distros_fedora {{ '}}' }}"
          register: __vars_main_block

        - name: Add to git transaction
          command:
            cmd: git add {{ path | quote }}
            chdir: "{{ git_dir }}"
          when: __vars_main_block is changed
          changed_when: true
          vars:
            path: "{{ 'vars/main.yml' if __vars_main.stat.exists
              else 'defaults/main.yml' }}"

        - name: Create an empty .codespell_ignores file if it doesn't exist
          shell:
            chdir: "{{ git_dir }}"
            cmd: |
              set -euo pipefail
              if [ ! -f .codespell_ignores ]; then
                touch .codespell_ignores
                git add .codespell_ignores
                echo Success
               fi
          register: codespell_ignores
          changed_when: "'Success' in codespell_ignores.stdout"

        - name: Create git commit, PR
          changed_when: false
          shell:
            chdir: "{{ git_dir }}"
            cmd: |
              set -euo pipefail
              git add meta/main.yml
              for file in {{ __all_present | join(" ") }}; do
                  git add "$file"
              done
              git add README.md
              if git diff --cached --quiet; then
                # nothing to do
                echo No updates for role {{ inventory_hostname }}
                exit 0
              fi
              commit_file={{ update_files_commit_file | quote }}
              branch={{ update_files_branch | quote }}
              git commit -s -F "$commit_file"
              force_flag="{{ __is_new | ternary('', '-f') }}"
              if [ {{ lsr_dry_run | d('true') }} = false ]; then
                git push $force_flag -u origin "$branch"
              echo
                echo git push $force_flag -u origin "$branch"
              fi
              prnum="$(gh pr list -H "$branch" --json number --jq '.[].number')"
              if [ -z "$prnum" ]; then
                cmd=(gh pr create --assignee @me --fill --base {{ __main_br | quote }})
                if [ {{ lsr_dry_run | d('true') }} = false ]; then
                  retries=0
                  backoff=10
                  while [ "$retries" -lt 10 ]; do
                    if "${cmd[@]}"; then
                      break
                    else
                      echo backing off "$backoff" seconds . . .
                      sleep "$backoff"
                      backoff=$(expr "$backoff" + 10)
                      retries=$(expr "$retries" + 1)
                    fi
                  done
                else
                  echo "${cmd[@]}"
                fi
              else
                echo Existing PR "$prnum"
                echo {{ github_url_prefix ~ github_org ~ '/' ~ inventory_hostname ~ '/pull/' }}$prnum
                # update PR assignee, title, and body
                tail -n +3 "$commit_file" | \
                  gh pr edit "$prnum" -F - --add-assignee @me --title "$(head -1 "$commit_file")"
              fi
      always:
        - name: Clean up temp working dir
          file:
            path: "{{ __working_dir.path }}"
            state: absent
          when: test_dir is not defined
